name: Package src on Change

on:
  push:
    paths:
      - src/**

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Package src directory
      run: |
        cd src
        zip -r ../guguweb_beta.mcdr .
        cd ..
        echo "Packaged src contents into guguweb_beta.mcdr"
        mkdir -p build
        cp guguweb_beta.mcdr build/
        echo "Copied guguweb_beta.mcdr to build directory"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: guguweb_beta.mcdr
        path: guguweb_beta.mcdr

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: guguweb_beta.mcdr
        path: .

    - name: Generate pre-release tag
      id: tag
      run: |
        # 生成时间戳标签，格式：v0.0.1-beta.$(date +%Y%m%d-%H%M%S)
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        TAG="v0.0.1-beta.${TIMESTAMP}"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Generated tag: ${TAG}"
        
        # 验证标签格式
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]{8}-[0-9]{6}$ ]]; then
          echo "Error: Invalid tag format generated: $TAG"
          exit 1
        fi
        
        # 检查是否与现有标签冲突
        echo "Checking for tag conflicts..."
        if gh api repos/${{ github.repository }}/git/refs/tags/$TAG >/dev/null 2>&1; then
          echo "Error: Tag $TAG already exists!"
          exit 1
        fi
        
        echo "✓ Tag $TAG is available"

    - name: Delete existing pre-releases
      run: |
        echo "=========================================="
        echo "🔍 Pre-release Management Strategy"
        echo "=========================================="
        echo "Will DELETE: Beta versions (v0.0.1-beta.*, v1.2.3-rc.*, etc.)"
        echo "Will PRESERVE: Formal versions (v1.0.0, v2.1.3, etc.)"
        echo "=========================================="
        
        # 获取所有pre-release，但排除正式的vx.x.x版本
        RELEASES=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.prerelease==true and (.tag_name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+$") | not)) | .id' 2>/dev/null || echo "")
        
        if [ ! -z "$RELEASES" ]; then
          echo "Found existing beta pre-releases, deleting them..."
          for RELEASE_ID in $RELEASES; do
            # 获取release的详细信息以显示tag_name
            TAG_NAME=$(gh api repos/${{ github.repository }}/releases/$RELEASE_ID --jq '.tag_name' 2>/dev/null || echo "unknown")
            echo "Deleting beta pre-release ID: $RELEASE_ID (Tag: $TAG_NAME)"
            if gh api repos/${{ github.repository }}/releases/$RELEASE_ID -X DELETE; then
              echo "✓ Successfully deleted beta pre-release: $TAG_NAME"
            else
              echo "⚠ Failed to delete beta pre-release: $TAG_NAME"
            fi
          done
        else
          echo "No existing beta pre-releases found"
        fi
        
        # 显示保留的正式版本
        FORMAL_RELEASES=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.prerelease==true and (.tag_name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))) | .tag_name' 2>/dev/null || echo "")
        if [ ! -z "$FORMAL_RELEASES" ]; then
          echo "Preserving formal pre-releases: $FORMAL_RELEASES"
        fi
        
        echo "=========================================="

    - name: Create pre-release
      run: |
        echo "Creating pre-release: ${{ steps.tag.outputs.tag }}"
        
        # 检查MCDR文件是否存在
        if [ ! -f "guguweb_beta.mcdr" ]; then
          echo "Error: guguweb_beta.mcdr file not found!"
          exit 1
        fi
        
        # 获取文件大小
        FILE_SIZE=$(stat -c%s "guguweb_beta.mcdr" 2>/dev/null || stat -f%z "guguweb_beta.mcdr" 2>/dev/null || echo "unknown")
        echo "File size: ${FILE_SIZE} bytes"
        
        # 创建新的pre-release
        if gh release create ${{ steps.tag.outputs.tag }} \
          --title "Beta Build - ${{ steps.tag.outputs.tag }}" \
          --notes "Automated beta build from source changes

        **Build Info:**
        - Commit: ${{ github.sha }}
        - Branch: ${{ github.ref_name }}
        - Build Time: $(date -u)
        - Triggered by: ${{ github.actor }}
        - File Size: ${FILE_SIZE} bytes

        **Installation:**
        Download the \`guguweb_beta.mcdr\` file and place it in your MCDR plugins directory.

        **Changes:**
        This is an automated build triggered by changes in the \`src/\` directory." \
          --prerelease \
          --target ${{ github.sha }} \
          guguweb_beta.mcdr; then
          
          echo "✓ Successfully created pre-release: ${{ steps.tag.outputs.tag }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }}"
        else
          echo "❌ Failed to create pre-release"
          exit 1
        fi

    - name: Clean up
      run: |
        # 清理本地文件
        rm -f guguweb_beta.mcdr
        echo "Cleanup completed"

    - name: Summary
      run: |
        echo "=========================================="
        echo "🎉 Pre-release creation completed!"
        echo "=========================================="
        echo "Tag: ${{ steps.tag.outputs.tag }}"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Actor: ${{ github.actor }}"
        echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }}"
        echo "=========================================="
